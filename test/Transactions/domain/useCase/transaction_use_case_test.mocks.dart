// Mocks generated by Mockito 5.4.5 from annotations
// in pemo/test/Transactions/domain/useCase/transaction_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pemo/core/networkService/models/api_request_failur.dart' as _i6;
import 'package:pemo/features/transactions/data/models/transaction_model.dart'
    as _i7;
import 'package:pemo/features/transactions/domain/entities/transaction_entity.dart'
    as _i3;
import 'package:pemo/features/transactions/domain/mapper/transaction_mapper.dart'
    as _i8;
import 'package:pemo/features/transactions/domain/repository/transaction_repository.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransactionEntity_1 extends _i1.SmartFake
    implements _i3.TransactionEntity {
  _FakeTransactionEntity_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TransactionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionRepository extends _i1.Mock
    implements _i4.TransactionRepository {
  MockTransactionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.ApiRequestFailure, List<_i7.TransactionModel>>>
      getTransactions() => (super.noSuchMethod(
            Invocation.method(
              #getTransactions,
              [],
            ),
            returnValue: _i5.Future<
                _i2.Either<_i6.ApiRequestFailure,
                    List<_i7.TransactionModel>>>.value(_FakeEither_0<
                _i6.ApiRequestFailure, List<_i7.TransactionModel>>(
              this,
              Invocation.method(
                #getTransactions,
                [],
              ),
            )),
          ) as _i5.Future<
              _i2.Either<_i6.ApiRequestFailure, List<_i7.TransactionModel>>>);

  @override
  _i5.Future<_i2.Either<_i6.ApiRequestFailure, _i7.TransactionModel>>
      getTransactionById(String? id) => (super.noSuchMethod(
            Invocation.method(
              #getTransactionById,
              [id],
            ),
            returnValue: _i5.Future<
                    _i2
                    .Either<_i6.ApiRequestFailure, _i7.TransactionModel>>.value(
                _FakeEither_0<_i6.ApiRequestFailure, _i7.TransactionModel>(
              this,
              Invocation.method(
                #getTransactionById,
                [id],
              ),
            )),
          ) as _i5
              .Future<_i2.Either<_i6.ApiRequestFailure, _i7.TransactionModel>>);
}

/// A class which mocks [TransactionMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionMapper extends _i1.Mock implements _i8.TransactionMapper {
  MockTransactionMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TransactionEntity transactionModelToEntity(_i7.TransactionModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #transactionModelToEntity,
          [model],
        ),
        returnValue: _FakeTransactionEntity_1(
          this,
          Invocation.method(
            #transactionModelToEntity,
            [model],
          ),
        ),
      ) as _i3.TransactionEntity);

  @override
  List<_i3.TransactionEntity> transactionModelListToEntityList(
          List<_i7.TransactionModel>? models) =>
      (super.noSuchMethod(
        Invocation.method(
          #transactionModelListToEntityList,
          [models],
        ),
        returnValue: <_i3.TransactionEntity>[],
      ) as List<_i3.TransactionEntity>);
}
